import type { GetStaticProps } from 'next'
import Head from 'next/head'
import { ReactNode } from 'react'
import InfiniteScroll from "react-infinite-scroll-component"
import axios from 'axios'
import { isEmpty } from 'lodash'

import { ExhibitionListLayout } from '../../components/layouts/exhibitions'
import Item, { ListItemProps } from '../../components/exhibitions/ListItem'

import { fetchList } from '../../hooks/exhibitions'

import { ITEMS_PER_PAGE } from '../../constants'

type ListProps = {
  initialList: ListItemProps[] | [],
  initialError: string
}

const List: ReactNode = (props: ListProps) => {

  const { initialList, initialError } = props
  const { error, list, fetchMore, page } = fetchList()

  return (
    <div>
      <Head>
        <title>Exhibitions</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <ExhibitionListLayout>
          <InfiniteScroll
            dataLength={list.length}
            className="grid grid-cols-4 gap-5"
            next={fetchMore}
            hasMore={true}
            loader={<p className='text-2xl font-bold italic'>LOADING...</p>}
          >
            {page === 1 && !isEmpty(initialList) && initialList.map((item: ListItemProps) => (
              <Item key={item.id} { ...item } />
            ))}
            {page === 1 && initialError && <div>{initialError}</div>}
            {page > 1 && !isEmpty(list) && list.map((item: ListItemProps) => (
              <Item key={item.id} { ...item } />
            ))}
            {page > 1 && error && <div>{error}</div>}
          </InfiniteScroll>
        </ExhibitionListLayout>
      </main>
    </div>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  const res = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/exhibitions?page=1&limit=${ITEMS_PER_PAGE}`)

  if (res.status === 200)
    return { props: { initialList: res.data.data, initialError: '' }}
  else
    return { props: { initialList: [], initialError: 'Fetch List Failed!'}}
}

export default List


